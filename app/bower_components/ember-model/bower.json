{
  "name": "ember-model",
  "version": "0.0.4",
  "main": "./ember-model.js",
  "dependencies": {
    "ember": "~1.0.0-rc.5",
    "handlebars": "~1.0.0-rc.4",
    "jquery": "~1.9.1"
  },
  "devDependencies": {
    "qunit": "~1.11"
  },
  "ignore": [
    "**/.*",
    "node_modules",
    "components"
  ],
  "gitHead": "260e43b823be43afe9b26f128ac70db3d3bb5b36",
  "readme": "# Ember.Model [![Build Status](https://travis-ci.org/ebryn/ember-model.png?branch=master)](https://travis-ci.org/ebryn/ember-model)\n\n## Introduction\n\nEmber Model (EM) is a simple and lightweight model library for Ember. It intentionally supports a limited feature set. The main goal is to provide primitives on top of $.ajax that are required by Ember.\n\nEM is still very much a work in progress, but it's flexible enough to be used in apps today. It was extracted out of an Ember app. Please see the issues section for a list of bugs and planned features.\n\n## Getting Started with Ember Model\n\n[Download latest build of Ember Model](http://builds.erikbryn.com/ember-model/ember-model-latest.js)\n\n[![Getting started Embercast](http://f.cl.ly/items/1T1t2T2p3d2u0A2b0q2P/embercast.png)](http://www.embercasts.com/episodes/getting-started-with-ember-model)\n\nNeed more help getting started? Join us in #ember-model on Freenode.\n\n## Features\n\n- BYO$A (bring your own $.ajax)\n- Relationships (hasMany/belongsTo)\n- Focused on performance\n- Automatic coalescing of multiple findById calls into a single findMany\n- Customizable dirty tracking (great for embedded objects)\n- Fixtures\n- Identity map (per class)\n- Promises everywhere\n- Customizable RESTAdapter\n\nIf you want more features than Ember Model provides, file an issue. Feature requests/contributions are welcome but the goal is to keep things simple and fast.\n\n## Example usage\n\n```javascript\nvar attr = Ember.attr, hasMany = Ember.hasMany;\n\n// Model definitions\nApp.User = Ember.Model.extend({\n  id: attr(),\n  name: attr(),\n  comments: hasMany(\"App.Comment\", {key: 'comment_ids'})\n});\n\nApp.User.url = \"/users\";\nApp.User.adapter = Ember.RESTAdapter.create();\n\nApp.Comment = Ember.Model.extend({\n  id: attr(),\n  text: attr()\n});\n\nApp.Comment.url = \"/comments\";\nApp.Comment.adapter = Ember.RESTAdapter.create();\n\n// create example\n\nvar newUser = App.User.create({name: \"Erik\"});\nnewUser.save(); // POST to /users.json\n\n// hasMany example\nvar comments = newUser.get('comments');\ncomments.create({text: \"hello!\"});\ncomments.save(); // POST to /comments.json\n\n// find & update example\n\nvar existingUser = App.User.find(1); // GET /users/1.json\nexistingUser.set('name', 'Kris');\nexistingUser.get('isDirty'); // => true\nexistingUser.save(); // PUT /users/1.json\n```\n\n## Model API\n\n`Model#create` - create a new record\n\n`Model#save` - save or update record\n\n`Model#load` - load JSON into the record (typically used inside adapter definition)\n\n`Model#toJSON` - serialize the record to JSON\n\n`Model.find()` - find all records\n\n`Model.find(<String|Number>)` - find by primary key (multiple calls within a single run loop can coalesce to a findMany)\n\n`Model.find(<object>)` - find query - object gets passed directly to your adapter\n\n`Model.load(<array>)` - load an array of model data (aka sideloading)\n\n## Adapter API\n\n```javascript\nEmber.Adapter = Ember.Object.extend({\n  find: function(record, id) {}, // find a single record\n\n  findAll: function(klass, records) {}, // find all records\n\n  findMany: function(klass, records, ids) {}, // find many records by primary key (batch find)\n\n  findQuery: function(klass, records, params) {}, // find records using a query\n\n  createRecord: function(record) {}, // create a new record on the server\n\n  saveRecord: function(record) {}, // save an existing record on the server\n\n  deleteRecord: function(record) {} // delete a record on the server\n});\n```\n## Attribute types\n\nAttributes by default have no type and are not typecast from the representation\nprovided in the JSON format. Objects and arrays are cloned, so that clean copy\nof the attribute is maintained internally in case of wanting to revert a dirty\nrecord to a clean state.\n\n### Built in attribute types\n\nEmber Model has built in `Date` and `Number` types. The `Date` type will deserialize\nstrings into a javascript Date object, and will serialize dates into\n[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. The `Number` type will\ncast into a numeric type on serialization and deserialization.\n\n```javascript\nApp.Post = Ember.Model.extend({\n  date: attr(Date),\n  comment_count: attr(Number)\n});\n```\n### Custom attribute types\n\nTo provide custom attribute serialization and deserialization, create an object that\nhas serialize and deserialize functions, and pass it into the attr helper:\n\n```javascript\nvar Time = {\n  serialize: function(time) {\n    return time.hour + \":\" + time.min;\n  },\n  deserialize: function(string) {\n    var array = string.split(\":\");\n    return {\n      hour: parseInt(array[0], 10),\n      min: parseInt(array[1], 10)\n    };\n  }\n};\n\nvar Post = Ember.Model.extend({\n  time: attr(Time)\n});\n```\n\n## Customizing\n\nThere are a few properties you can set on your class to customize how either\n`Ember.Model` or `Ember.RESTAdapter` work:\n\n### primaryKey\n\nThe property Ember Model uses for a per-record unique value (default: \"id\").\n\n```javascript\nApp.User = Ember.Model.extend({\n  token: attr(),\n  name: attr()\n});\nApp.User.primaryKey = 'token';\n```\n\n```\nGET /users/a4bc81f90.json\n{\"token\": \"a4bc81f90\", \"name\": \"Brian\"}\n```\n\n### rootKey\n\nWhen `RESTAdapter` creates a record from data loaded from the server it will\nuse the data from this property instead of the whole response body.\n\n```javascript\nApp.User = Ember.Model.extend({\n  name: attr()\n});\nApp.User.rootKey = 'user';\n```\n\n```\nGET /users/1.json\n{\"user\": {\"id\": 1, \"name\": \"Brian\"}}\n```\n\n### collectionKey\n\nWhen `RESTAdapter` creates multiple records from data loaded from the server it\nwill use the data from this property instead of the whole response body.\n\n```javascript\nApp.User = Ember.Model.extend({\n  name: attr()\n});\nApp.User.collectionKey = 'users';\n```\n\n```\nGET /users.json\n{\"users\": [{\"id\": 1, \"name\": \"Brian\"}]}\n```\n\n## Building Ember-Model\nEmber-Model uses [node.js](http://nodejs.org/) and [grunt](http://gruntjs.com/) as a build system,\nThese three libraries will need to be installed before building.\n \nTo build Ember-Model, clone the repository, and run `npm install` to install build dependencies\nand `grunt` to build the library.\n\nUnminified and minified builds of Ember-Model will be placed in the `dist`\ndirectory.\n\n## How to Run Unit Tests\n\n### Setup\n\nEmber-Model uses [node.js](http://nodejs.org/) and [grunt](http://gruntjs.com/) as a build system\nand test runner, and [bower](http://bower.io/) for dependency management.\n\nTo test Ember-Model run `npm install` to install build dependencies, `bower install` to install the\nruntime dependencies and `grunt test` to execute the test suite headlessly via phantomjs.\n\n### In Your Browser\n???\n\n## Who's using Ember Model?\n\n* [LiveNation](http://www.livenation.com)\n* [Square](http://www.squareup.com)\n* [Embercasts](http://www.embercasts.com)\n* [Digital Science](http://www.digital-science.com)\n* [Travis CI](https://travis-ci.org)\n* [Bugzilla-Ember](https://github.com/ebryn/bugzilla-ember)\n\nAre you using Ember Model? Submit a pull request to add your project to this list!\n\n## Special Thanks\n\nYehuda Katz (@wycats), Tom Dale (@tomdale), Igor Terzic (@igorT), and company for their amazing work on Ember Data. I believe it's the most ambitious JS project today. The goal is someday everyone's JSON APIs will be conventional enough that Ember Data will be the best choice of data library for Ember. Until then, Ember Model will make it easy to get up and running quickly with Ember.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ebryn/ember-model/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "_id": "ember-model@0.0.4",
  "description": "## Introduction",
  "repository": {
    "type": "git",
    "url": "git://github.com/ebryn/ember-model.git"
  }
}